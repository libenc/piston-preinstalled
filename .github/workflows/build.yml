name: Build and Push to GHCR

on:
  schedule:
    - cron: "0 6 * * 5" # at 06:00 on Friday
  workflow_dispatch:
    inputs:
      force-renew:
        description: "Force renew"
        type: "boolean"
        required: true
        default: false
      tag-suffix:
        description: "Tag suffix, e.g. -test"
        type: "string"
        required: false
        default: ""

jobs:
  check-release:
    runs-on: ubuntu-latest
    steps:
      - name: Get previous runtime index
        uses: dawidd6/action-download-artifact@v3
        with:
          name: previous-index
          # check_artifacts: true
          search_artifacts: true
          if_no_artifact_found: warn
          allow_forks: false

      - name: Get previous image digest
        uses: dawidd6/action-download-artifact@v3
        with:
          name: previous-digest
          # check_artifacts: true
          search_artifacts: true
          if_no_artifact_found: warn
          allow_forks: false

      - name: Get current infos
        id: get_current
        run: |
          curl -L https://github.com/engineer-man/piston/releases/download/pkgs/index -o current-index.txt
          docker manifest inspect ghcr.io/engineer-man/piston:latest -v | jq -r ".Descriptor.digest" > current-digest.txt
          if [ ! -f current-index.txt ] || [ ! -f current-digest.txt ] || [ "$(cat current-digest.txt)" == "null" ]; then
            echo "Failed to get current release and digest"
            exit 1
          fi

      - name: Compare
        id: compare
        run: |
          if [ -f previous-index.txt ] && [ -f previous-digest.txt ] && [ "$(cat previous-digest.txt)" != "null" ]; then
            renew=false
            if [ "$(cat previous-index.txt)" != "$(cat current-index.txt)" ]; then
              renew=true
            fi
            if [ "$(cat previous-digest.txt)" != "$(cat current-digest.txt)" ]; then
              renew=true
            fi
            echo "renew=${renew}" >> $GITHUB_OUTPUT
          else
            echo "renew=true" >> $GITHUB_OUTPUT
          fi
          echo "Renew: ${renew}"

      - name: Rename files
        run: |
          mv current-index.txt previous-index.txt
          mv current-digest.txt previous-digest.txt

      - name: Save runtime index
        uses: actions/upload-artifact@v4
        with:
          name: previous-index
          path: previous-index.txt

      - name: Save image digest
        uses: actions/upload-artifact@v4
        with:
          name: previous-digest
          path: previous-digest.txt

  get-specs-matrix:
    needs: check-release
    if: steps.check-release.outputs.renew == 'true' || ${{ github.event.inputs.force-renew }}
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.specs-matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Detect files
        id: set-matrix
        run: |
          cd specs
          FILES_JSON=$(ls *.pps | jq -R . | jq -sc '[.[] | {spec: (split(".")[0])}]')
          echo "specs-matrix={\"include\":$FILES_JSON}" >> $GITHUB_OUTPUT
        shell: bash

  build:
    needs:
      - check-release
      - get-specs-matrix
    if: steps.check-release.outputs.renew == 'true' || ${{ github.event.inputs.force-renew }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.get-specs-matrix.outputs.matrix)}}
    steps:
      - name: Check disk space
        run: df -h

      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          build-mount-path: /var/lib/docker/
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"
          remove-docker-images: "true"

      - name: Restart docker
        run: |
          sudo service docker restart
          CURRENT_USER=$(whoami)
          sudo setfacl -m u:$CURRENT_USER:rwx /var/lib/docker
          sudo mkdir /var/lib/docker/build-output
          sudo chown -R $CURRENT_USER:$CURRENT_USER /var/lib/docker/build-output
          sudo ls -lah /var/lib/docker
          df -h

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Prepare spec file
        run: |
          cp specs/${{ matrix.spec }}.pps myspec.pps

      - name: Set env
        id: set-env
        run: |
          CURRENT_DATE=$(date +'%Y%m%d')
          echo "date=$CURRENT_DATE" >> $GITHUB_OUTPUT
          echo "tagname=$CURRENT_DATE${{ github.event.inputs.tag-suffix }}" >> $GITHUB_OUTPUT
          echo "imgtagname=${{ matrix.spec}}-$CURRENT_DATE${{ github.event.inputs.tag-suffix }}" >> $GITHUB_OUTPUT
          echo "imgfullname=ghcr.io/${{ github.repository }}:${{ matrix.spec}}-$CURRENT_DATE${{ github.event.inputs.tag-suffix }}" >> $GITHUB_OUTPUT

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # - name: Build and push to GHCR
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     push: true
      #     tags: |
      #       ghcr.io/${{ github.repository }}:${{ matrix.spec}}
      #       ${{ steps.set-env.outputs.imgfullname }}

      # https://docs.docker.com/build/exporters/image-registry/
      - name: Build and push to GHCR
        run: |
          df -h
          docker buildx build \
            --output type=registry,\"name=ghcr.io/${{ github.repository }}:${{ matrix.spec}},${{ steps.set-env.outputs.imgfullname }}\",push=true,compression=zstd,compression-level=22,force-compression=true,store=true . 
          docker images
          df -h

      # # Currently push and load cannot be used together, check https://github.com/docker/build-push-action/issues/1056
      # # Should produce a same result with cache except some metadata like digest
      # - name: Export image to Docker
      #   uses: docker/build-push-action@v5
      #   timeout-minutes: 300
      #   with:
      #     context: .
      #     # load: true
      #     outputs: type=docker,dest=/var/lib/docker/build-output/${{ steps.set-env.outputs.imgtagname }}.tar
      #     tags: |
      #       ghcr.io/${{ github.repository }}:${{ matrix.spec}}
      #       ${{ steps.set-env.outputs.imgfullname }}

      # https://docs.docker.com/build/exporters/oci-docker/
      - name: Export image to local
        timeout-minutes: 300
        run: |
          docker buildx build -t ghcr.io/${{ github.repository }}:${{ matrix.spec}} \
            -t ${{ steps.set-env.outputs.imgfullname }} \
            --output type=docker,compression=zstd,compression-level=22,force-compression=true,dest=- . | \
            split -b 2GB -d -a 2 - /var/lib/docker/build-output/${{ steps.set-env.outputs.imgtagname }}.tar.
          cd /var/lib/docker/build-output
          split_files=($(ls ${{ steps.set-env.outputs.imgtagname }}.tar.* 2> /dev/null))
          if [[ "${#split_files[@]}" -eq 1 && "${split_files[0]}" == "${{ steps.set-env.outputs.imgtagname }}.tar.00" ]]; then
            mv "${split_files[0]}" "${{ steps.set-env.outputs.imgtagname }}.tar"
          fi
          sha256sum ${{ steps.set-env.outputs.imgtagname }}.tar* > ${{ steps.set-env.outputs.imgtagname }}.SHA256SUMS
          ls -lah
          df -h

      - name: Inspect image
        run: |
          cd /var/lib/docker/build-output
          docker manifest inspect ${{ steps.set-env.outputs.imgfullname }} -v > ${{ steps.set-env.outputs.imgtagname }}.manifest.json
          cat ${{ steps.set-env.outputs.imgtagname }}.manifest.json

      - name: Upload Release
        timeout-minutes: 60
        uses: svenstaro/upload-release-action@v2
        with:
          file_glob: true
          file: /var/lib/docker/build-output/${{ steps.set-env.outputs.imgtagname }}.*
          tag: ${{ steps.set-env.outputs.tagname }}
          body: |
            Triggered by: `${{ github.event_name }}`
            Force renew: `${{ github.event.inputs.force-renew }}`
          overwrite: true
